// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	homestay "airbnb/feature/homestay"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *RepositoryInterface) Create(input homestay.HomestayEntity) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(homestay.HomestayEntity) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *RepositoryInterface) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *RepositoryInterface) GetAll() ([]homestay.HomestayEntity, error) {
	ret := _m.Called()

	var r0 []homestay.HomestayEntity
	if rf, ok := ret.Get(0).(func() []homestay.HomestayEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]homestay.HomestayEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserHome provides a mock function with given fields: id
func (_m *RepositoryInterface) GetUserHome(id uint) (homestay.HomestayEntity, error) {
	ret := _m.Called(id)

	var r0 homestay.HomestayEntity
	if rf, ok := ret.Get(0).(func(uint) homestay.HomestayEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(homestay.HomestayEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *RepositoryInterface) Update(id int, input homestay.HomestayEntity) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, homestay.HomestayEntity) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryInterface(t mockConstructorTestingTNewRepositoryInterface) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
